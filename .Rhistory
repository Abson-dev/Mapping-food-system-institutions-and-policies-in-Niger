border = fp_border(color = "black",
width = 0.25,
style = "dotted")) %>%
autofit(part = "body") %>%
bg(part = "body", bg = "#f5f5f5") %>%
align(part = "all", align = "center") %>%
align(j = 1, part = "all", align = "left")
}
library(haven)
EVALUATION_DES_CAPACITES_Hema <- read_dta(paste0(here::here(),"/data/IFPRI NIGER - EVALUATION DES CAPACITES_Hema.dta"))
library(haven)
EVALUATION_DES_CAPACITES_Hema <- read_dta(paste0(here::here(),"/data/IFPRI NIGER - EVALUATION DES CAPACITES_Hema.dta"))
domain = c("dom_1","dom_2","dom_3","dom_4","dom_5")
attach(EVALUATION_DES_CAPACITES_Hema)
EVALUATION_DES_CAPACITES_Hema$q_iv_1
`Non, parce que j’ai déjà vendu ces
table(EVALUATION_DES_CAPACITES_Hema$q_iii_25)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(officedown)
library(officer)
library(gtsummary)
library(flextable)
library(magrittr)
set_gtsummary_theme(theme_gtsummary_compact())
######### Create default BioAVR table from dataframe
#
# Dependencies : dplyr, flextable, officer
# source link : https://www.r-bloggers.com/2021/11/publication-ready-tables-with-flextable-and-own-theme-in-r/
customtab_defaults <- function(){
set_flextable_defaults(font.family = "Calibri",
font.size = 10,
border.color = "black")
}
custom_tab <- function(df, header, footer){
flextable(df) %>%
add_header_lines(header) %>%
add_footer_lines(footer) %>%
bold(i = 1, part = "header") %>%
hline_top(part = "header",
border = fp_border(color = "green",
width = 3,
style = "solid")) %>%
hline(i = 1,
part = "header",
border = fp_border(color = "black",
width = 0.25,
style = "solid")) %>%
hline_top(part = "body",
border = fp_border(color = "black",
width = 0.25,
style = "solid")) %>%
hline_bottom(part = "body",
border = fp_border(color = "black",
width = 0.25,
style = "solid")) %>%
hline_bottom(part = "footer",
border = fp_border(color = "black",
width = 0.25,
style = "solid")) %>%
border_inner_h(part = "body",
border = fp_border(color = "black",
width = 0.25,
style = "dotted")) %>%
autofit(part = "body") %>%
bg(part = "body", bg = "#f5f5f5") %>%
align(part = "all", align = "center") %>%
align(j = 1, part = "all", align = "left")
}
library(dplyr)
library(expss)
library(openxlsx)
library(readxl)
library(tidyverse)
library(janitor)
library(data.table)
library(stringr)
library(compareDF)
library(sjlabelled)
library(lmtest)
library(sandwich)
library(labelled)
EVALUATION_DES_CAPACITES_Hema = EVALUATION_DES_CAPACITES_Hema %>% dplyr::mutate(var_vec = dplyr::recode(var_vec, `1` = 1,`2` =1 ,`3`= 2, `4`= 3,`5`= 3))
var_vec = c("q_iii_25"
)
EVALUATION_DES_CAPACITES_Hema = EVALUATION_DES_CAPACITES_Hema %>% dplyr::mutate(var_vec = dplyr::recode(var_vec, `1` = 1,`2` =1 ,`3`= 2, `4`= 3,`5`= 3))
EVALUATION_DES_CAPACITES_Hema$var_vec <- labelled::labelled(EVALUATION_DES_CAPACITES_Hema$var_vec, c(Agree = 1,
Neutral = 2,
Disagree =3))
table(EVALUATION_DES_CAPACITES_Hema$q_iii_25)
table(EVALUATION_DES_CAPACITES_Hema$var_vec)
EVALUATION_DES_CAPACITES_Hema = EVALUATION_DES_CAPACITES_Hema %>% dplyr::mutate(q_iii_25 = dplyr::recode(q_iii_25, `1` = 1,`2` =1 ,`3`= 2, `4`= 3,`5`= 3))
EVALUATION_DES_CAPACITES_Hema$q_iii_25 <- labelled::labelled(EVALUATION_DES_CAPACITES_Hema$q_iii_25, c(Agree = 1,Neutral = 2,Disagree =3))
EVALUATION_DES_CAPACITES_Hema$q_iii_25
table(EVALUATION_DES_CAPACITES_Hema$q_iii_25)
library(haven)
EVALUATION_DES_CAPACITES_Hema <- read_dta(paste0(here::here(),"/data/IFPRI NIGER - EVALUATION DES CAPACITES_Hema.dta"))
domain = c("dom_1","dom_2","dom_3","dom_4","dom_5")
attach(EVALUATION_DES_CAPACITES_Hema)
var_vec = c("q_iii_25"
)
EVALUATION_DES_CAPACITES_Hema <- EVALUATION_DES_CAPACITES_Hema %>%
dplyr::mutate(across(var_vec,
~recode(., labels = c(
`1` = 1,`2` =1 ,`3`= 2, `4`= 3,`5`= 3
)
)
)
)
EVALUATION_DES_CAPACITES_Hema <- EVALUATION_DES_CAPACITES_Hema %>%
dplyr::mutate(across(var_vec,
~labelled::labelled(., labels = c(
Agree = 1,Neutral = 2,Disagree =3
)
)
)
)
EVALUATION_DES_CAPACITES_Hema$q_iii_25
table(EVALUATION_DES_CAPACITES_Hema$q_iii_25)
EVALUATION_DES_CAPACITES_Hema <- EVALUATION_DES_CAPACITES_Hema %>%
dplyr::mutate(across(var_vec,
~recode(., labels = c(
"1" = 1,"2" =1 ,"3"= 2, "4"= 3,"5"= 3
)
)
)
)
EVALUATION_DES_CAPACITES_Hema <- EVALUATION_DES_CAPACITES_Hema %>%
dplyr::mutate(across(var_vec,
~recode(.
"1" = 1,"2" =1 ,"3"= 2, "4"= 3,"5"= 3
EVALUATION_DES_CAPACITES_Hema <- EVALUATION_DES_CAPACITES_Hema %>%
dplyr::mutate(across(var_vec,
~recode(.,
"1" = 1,"2" =1 ,"3"= 2, "4"= 3,"5"= 3
)
)
)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(officedown)
library(officer)
library(gtsummary)
library(flextable)
library(magrittr)
set_gtsummary_theme(theme_gtsummary_compact())
######### Create default BioAVR table from dataframe
#
# Dependencies : dplyr, flextable, officer
# source link : https://www.r-bloggers.com/2021/11/publication-ready-tables-with-flextable-and-own-theme-in-r/
customtab_defaults <- function(){
set_flextable_defaults(font.family = "Calibri",
font.size = 10,
border.color = "black")
}
custom_tab <- function(df, header, footer){
flextable(df) %>%
add_header_lines(header) %>%
add_footer_lines(footer) %>%
bold(i = 1, part = "header") %>%
hline_top(part = "header",
border = fp_border(color = "green",
width = 3,
style = "solid")) %>%
hline(i = 1,
part = "header",
border = fp_border(color = "black",
width = 0.25,
style = "solid")) %>%
hline_top(part = "body",
border = fp_border(color = "black",
width = 0.25,
style = "solid")) %>%
hline_bottom(part = "body",
border = fp_border(color = "black",
width = 0.25,
style = "solid")) %>%
hline_bottom(part = "footer",
border = fp_border(color = "black",
width = 0.25,
style = "solid")) %>%
border_inner_h(part = "body",
border = fp_border(color = "black",
width = 0.25,
style = "dotted")) %>%
autofit(part = "body") %>%
bg(part = "body", bg = "#f5f5f5") %>%
align(part = "all", align = "center") %>%
align(j = 1, part = "all", align = "left")
}
library(dplyr)
library(expss)
library(openxlsx)
library(readxl)
library(tidyverse)
library(janitor)
library(data.table)
library(stringr)
library(compareDF)
library(sjlabelled)
library(lmtest)
library(sandwich)
library(labelled)
# This function aims at providing customized statistics in the table that
# with be produced using the gtsummary package
# Basically the gtsummary does not include such a function
add_by_n <- function(data, variable, by, tbl, ...) {
data %>%
select(all_of(c(variable, by))) %>%
dplyr::group_by(.data[[by]]) %>%
dplyr::summarise_all(~sum(!is.na(.))) %>%
rlang::set_names(c("by", "variable")) %>%
dplyr::left_join(
tbl$df_by %>% select(by, by_col),
by = "by"
) %>%
mutate(
by_col = paste0("add_n_", by_col),
variable = style_number(variable)
) %>%
select(-by) %>%
tidyr::pivot_wider(names_from = by_col,
values_from = variable)
}
library(haven)
EVALUATION_DES_CAPACITES_Hema <- read_dta(paste0(here::here(),"/data/IFPRI NIGER - EVALUATION DES CAPACITES_Hema.dta"))
domain = c("dom_1","dom_2","dom_3","dom_4","dom_5")
attach(EVALUATION_DES_CAPACITES_Hema)
# //Organizational capacity
#
# dtable, factor (q_iii_25 q_iii_30 q_iii_35) // enabling environment and org capacity
# dtable, factor (q_iv_1 q_iv_5) // Analysis
# dtable, factor (q_v_1 q_v_5) // strategy development
# dtable, factor (q_vi_1 q_vi_5 q_vi_9) // implementation
# dtable, factor (q_vii_1 q_vii_5 q_vii_9 q_vii_11 q_vii_10 q_vii_15 q_vii_19 q_vii_21 q_vii_23) // M&E
# dtable, factor (q_viii_1 q_viii_5 q_viii_9) // strategy revision
# dtable, factor (q_ix_1 q_ix_5 q_ix_11 q_ix_15 q_ix_22) // institutional motivation
# dtable, factor (q_x_1 q_x_4 q_x_6 q_x_8) // operational capacity
#
# //Individual capacity
#
# dtable, factor (q_xi_2_1 q_xi_2_2 q_xi_2_3 q_xi_2_4 q_xi_2_5) // individual capacity//
var_vec = c("q_iii_25"
)
EVALUATION_DES_CAPACITES_Hema <- EVALUATION_DES_CAPACITES_Hema %>%
dplyr::mutate(across(var_vec,
~recode(.,
"1" = 1,"2" =1 ,"3"= 2, "4"= 3,"5"= 3
)
)
)
num_vec = 1:5
num_vec
df = data.frame(num = 1:5,
even = c(FALSE, TRUE, FALSE, TRUE, FALSE),
old = c(TRUE, FALSE, TRUE, FALSE, TRUE))
View(df)
df %>% filter(old = TRUE)
df %>% filter(old = TRUE)
df %>% filter(old == TRUE)
df = mtcars
View(df)
df %>%
dplyr::mutate(sum = mpg + disp) %>%
dplyr::select(sum)
#----
df$mpg + df$disp
#----
df %>% rowSums(, na.rm = T)
#----
sum(df$mpg , df$disp, na.rm = T)
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
View(mdat)
mdat <- matrix(c(1,2,3, 11,12,13, 11,12,13, 11,12,13), nrow = 4, ncol = 4, byrow = TRUE,
dimnames = list(c("row1", "row2","row3", "row4"),
c("C.1", "C.2", "C.3",, "C.4")))
mdat <- matrix(c(1,2,3, 11,12,13, 11,12,13, 11,12,13), nrow = 4, ncol = 4, byrow = TRUE,
dimnames = list(c("row1", "row2","row3", "row4"),
c("C.1", "C.2", "C.3", "C.4")))
mdat
print(mdat[5,1])
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(officedown)
library(officer)
library(gtsummary)
library(flextable)
library(magrittr)
set_gtsummary_theme(theme_gtsummary_compact())
######### Create default BioAVR table from dataframe
#
# Dependencies : dplyr, flextable, officer
# source link : https://www.r-bloggers.com/2021/11/publication-ready-tables-with-flextable-and-own-theme-in-r/
customtab_defaults <- function(){
set_flextable_defaults(font.family = "Calibri",
font.size = 10,
border.color = "black")
}
custom_tab <- function(df, header, footer){
flextable(df) %>%
add_header_lines(header) %>%
add_footer_lines(footer) %>%
bold(i = 1, part = "header") %>%
hline_top(part = "header",
border = fp_border(color = "green",
width = 3,
style = "solid")) %>%
hline(i = 1,
part = "header",
border = fp_border(color = "black",
width = 0.25,
style = "solid")) %>%
hline_top(part = "body",
border = fp_border(color = "black",
width = 0.25,
style = "solid")) %>%
hline_bottom(part = "body",
border = fp_border(color = "black",
width = 0.25,
style = "solid")) %>%
hline_bottom(part = "footer",
border = fp_border(color = "black",
width = 0.25,
style = "solid")) %>%
border_inner_h(part = "body",
border = fp_border(color = "black",
width = 0.25,
style = "dotted")) %>%
autofit(part = "body") %>%
bg(part = "body", bg = "#f5f5f5") %>%
align(part = "all", align = "center") %>%
align(j = 1, part = "all", align = "left")
}
library(dplyr)
library(expss)
library(openxlsx)
library(readxl)
library(tidyverse)
library(janitor)
library(data.table)
library(stringr)
library(compareDF)
library(sjlabelled)
library(lmtest)
library(sandwich)
library(labelled)
# This function aims at providing customized statistics in the table that
# with be produced using the gtsummary package
# Basically the gtsummary does not include such a function
add_by_n <- function(data, variable, by, tbl, ...) {
data %>%
select(all_of(c(variable, by))) %>%
dplyr::group_by(.data[[by]]) %>%
dplyr::summarise_all(~sum(!is.na(.))) %>%
rlang::set_names(c("by", "variable")) %>%
dplyr::left_join(
tbl$df_by %>% select(by, by_col),
by = "by"
) %>%
mutate(
by_col = paste0("add_n_", by_col),
variable = style_number(variable)
) %>%
select(-by) %>%
tidyr::pivot_wider(names_from = by_col,
values_from = variable)
}
library(haven)
EVALUATION_DES_CAPACITES_Hema <- read_dta(paste0(here::here(),"/data/IFPRI NIGER - EVALUATION DES CAPACITES_Hema.dta"))
domain = c("dom_1","dom_2","dom_3","dom_4","dom_5")
attach(EVALUATION_DES_CAPACITES_Hema)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(officedown)
library(officer)
library(gtsummary)
library(flextable)
library(magrittr)
set_gtsummary_theme(theme_gtsummary_compact())
######### Create default BioAVR table from dataframe
#
# Dependencies : dplyr, flextable, officer
# source link : https://www.r-bloggers.com/2021/11/publication-ready-tables-with-flextable-and-own-theme-in-r/
customtab_defaults <- function(){
set_flextable_defaults(font.family = "Calibri",
font.size = 10,
border.color = "black")
}
custom_tab <- function(df, header, footer){
flextable(df) %>%
add_header_lines(header) %>%
add_footer_lines(footer) %>%
bold(i = 1, part = "header") %>%
hline_top(part = "header",
border = fp_border(color = "green",
width = 3,
style = "solid")) %>%
hline(i = 1,
part = "header",
border = fp_border(color = "black",
width = 0.25,
style = "solid")) %>%
hline_top(part = "body",
border = fp_border(color = "black",
width = 0.25,
style = "solid")) %>%
hline_bottom(part = "body",
border = fp_border(color = "black",
width = 0.25,
style = "solid")) %>%
hline_bottom(part = "footer",
border = fp_border(color = "black",
width = 0.25,
style = "solid")) %>%
border_inner_h(part = "body",
border = fp_border(color = "black",
width = 0.25,
style = "dotted")) %>%
autofit(part = "body") %>%
bg(part = "body", bg = "#f5f5f5") %>%
align(part = "all", align = "center") %>%
align(j = 1, part = "all", align = "left")
}
library(dplyr)
library(expss)
library(openxlsx)
library(readxl)
library(tidyverse)
library(janitor)
library(data.table)
library(stringr)
library(compareDF)
library(sjlabelled)
library(lmtest)
library(sandwich)
library(labelled)
# This function aims at providing customized statistics in the table that
# with be produced using the gtsummary package
# Basically the gtsummary does not include such a function
add_by_n <- function(data, variable, by, tbl, ...) {
data %>%
select(all_of(c(variable, by))) %>%
dplyr::group_by(.data[[by]]) %>%
dplyr::summarise_all(~sum(!is.na(.))) %>%
rlang::set_names(c("by", "variable")) %>%
dplyr::left_join(
tbl$df_by %>% select(by, by_col),
by = "by"
) %>%
mutate(
by_col = paste0("add_n_", by_col),
variable = style_number(variable)
) %>%
select(-by) %>%
tidyr::pivot_wider(names_from = by_col,
values_from = variable)
}
library(haven)
EVALUATION_DES_CAPACITES_Hema <- read_dta(paste0(here::here(),"/data/IFPRI NIGER - EVALUATION DES CAPACITES_Hema.dta"))
domain = c("dom_1","dom_2","dom_3","dom_4","dom_5")
attach(EVALUATION_DES_CAPACITES_Hema)
var_recode = c("q_iii_25","q_iii_30","q_iii_35",
"q_iv_1","q_iv_5","q_v_1","q_v_5",
"q_vi_1","q_vi_5","q_vi_9","q_vii_1",
"q_vii_5","q_vii_9","q_vii_11","q_vii_10",
"q_vii_15","q_vii_19","q_vii_21","q_vii_23",
"q_viii_1","q_viii_5","q_viii_9","q_ix_1",
"q_ix_5","q_ix_11","q_ix_15","q_ix_22",
"q_x_1","q_x_4","q_x_6","q_x_8"
)
# EVALUATION_DES_CAPACITES_Hema = EVALUATION_DES_CAPACITES_Hema %>% dplyr::mutate(q_iii_25 = dplyr::recode(q_iii_25, `1` = 1,`2` =1 ,`3`= 2, `4`= 3,`5`= 3))
EVALUATION_DES_CAPACITES_Hema <- EVALUATION_DES_CAPACITES_Hema %>%
dplyr::mutate(across(var_recode,
~dplyr::recode(.,`1` = 1,`2` =1 ,`3`= 2, `4`= 3,`5`= 3
)
)
)
# EVALUATION_DES_CAPACITES_Hema <- EVALUATION_DES_CAPACITES_Hema %>%
#   dplyr::mutate(across(var_vec,
#                 ~recode(.,
#                   "1" = 1,"2" =1 ,"3"= 2, "4"= 3,"5"= 3
#
#                 )
#   )
#   )
#
EVALUATION_DES_CAPACITES_Hema <- EVALUATION_DES_CAPACITES_Hema %>%
dplyr::mutate(across(var_recode,
~labelled::labelled(., labels = c(
Agree = 1,Neutral = 2,Disagree =3
)
)
)
)
